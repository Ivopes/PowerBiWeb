@page "/login"
@using PowerBiWeb.Shared.User;
@layout EmptyLayout
@using Blazored.LocalStorage
@using PowerBiWeb.Client.Utilities.Auth;
@inject ILocalStorageService _localStorage
@inject NavigationManager navigation
@inject AuthenticationStateProvider authProvider
@inject ILogger<Login> _logger
@inject HttpClient httpClient
@inject IToastService toastService
@attribute [AllowAnonymous]

<LoadingIndicator @bind-Visible="loading">
    <div class="d-flex justify-content-center align-items-center flex-column">
        <Card Style="width: 35vh" Background="Background.Light">
        @if (login)
        {
            <CardBody>
            <CardTitle>
             <h3>
                Login
             </h3>
            </CardTitle>
                <Validations ValidateOnLoad="false" @ref="loginForm">
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field Horizontal>
                        <FieldLabel >Username</FieldLabel>
                        <FieldBody >
                            <TextEdit @bind-Text="userLoginData.Username">
                                <Feedback>
                                    <ValidationError>Username is required</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field Horizontal>
                        <FieldLabel>Password</FieldLabel>
                        <FieldBody >
                            <TextEdit Role="TextRole.Password" @bind-Text="userLoginData.Password">
                                <Feedback>
                                    <ValidationError>Password is required</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
                </CardBody>
            <div>
            <Button Color="Color.Primary" Class="m-2" Clicked="@HandleLogin">
                Login
            </Button>

            <Button Color="Color.Secondary" Class="m-2" Clicked="() => login = false">
                Register
            </Button>
            </div>
        }
        else 
        {
            <CardBody>
                <CardTitle>
                 <h3>
                    Register
                 </h3>
                </CardTitle>
                <Validations ValidateOnLoad="false" Model="userRegisterData" @ref="registerForm">
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field Horizontal>
                        <FieldLabel >Firstname</FieldLabel>
                        <FieldBody >
                            <TextEdit @bind-Text="@userRegisterData.Firstname">
                                <Feedback>
                                    <ValidationError>Firstname is required</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field Horizontal>
                        <FieldLabel >Lastname</FieldLabel>
                        <FieldBody>
                            <TextEdit @bind-Text="@userRegisterData.Lastname">
                                <Feedback>
                                    <ValidationError>Lastname is required</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsEmail">
                    <Field Horizontal>
                        <FieldLabel>Email</FieldLabel>
                        <FieldBody >
                            <TextEdit Role="TextRole.Email" @bind-Text="@userRegisterData.Email">
                                <Feedback>
                                    <ValidationError>Email is required</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field Horizontal>
                        <FieldLabel >Username</FieldLabel>
                        <FieldBody >
                            <TextEdit @bind-Text="@userRegisterData.Username">
                                <Feedback>
                                    <ValidationError>Username is required</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field Horizontal>
                        <FieldLabel>Password</FieldLabel>
                        <FieldBody >
                            <TextEdit Role="TextRole.Password" @bind-Text="@userRegisterData.Password">
                                <Feedback>
                                    <ValidationError>Password is required</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
            </CardBody>
            <div>
            <Button Color="Color.Primary" Class="m-2" Clicked="@HandleRegister">
                Create Account
            </Button>

            <Button Color="Color.Secondary" Class="m-2" Clicked="() => login = true">
                Login
            </Button>
            </div>
        }
        </Card>
    </div>
</LoadingIndicator>
@code {
    private bool login = true;
    private UserLoginInformation userLoginData = new();
    private UserRegisterInformation userRegisterData = new();
    private Validations? loginForm;
    private Validations? registerForm;
    private bool loading;

    private async Task HandleLogin()
    {
        if (!await loginForm!.ValidateAll()) return;

        loading = true;

        var response = await httpClient.PostAsJsonAsync("api/auth", userLoginData);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();

            if (authProvider is TokenAuthStateProvider aProvider)
            {
                await aProvider.SaveToken(token);
            }

            await authProvider.GetAuthenticationStateAsync();
            navigation.NavigateTo("/");
        }
        else
        {
            toastService.ShowError("Wrong username/password");
        }
        loading = false;
    }
    private async Task HandleRegister()
    {
        if (!await registerForm!.ValidateAll()) return;

        loading = true;

        var response = await httpClient.PostAsJsonAsync("api/appusers", userRegisterData);
        if (response.IsSuccessStatusCode)
        {
            response = await httpClient.PostAsJsonAsync("api/auth", userRegisterData);

            if (authProvider is TokenAuthStateProvider aProvider)
            {
                await aProvider.SaveToken(await response.Content.ReadAsStringAsync());
            }

            await authProvider.GetAuthenticationStateAsync();
            navigation.NavigateTo("/");
        }
        else
        {
            toastService.ShowError(await response.Content.ReadAsStringAsync());
        }
        loading = false;
    }
}
