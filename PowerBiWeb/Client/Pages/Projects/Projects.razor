@page "/projects"
@using PowerBiWeb.Client.Utilities.Interfaces;
@using PowerBiWeb.Shared.Projects
@inject IJSRuntime JS
@inject ILogger<Projects> _logger;
@inject IToastService toastService;
@inject IProjectService _projectService
@inject NavigationManager navigation
@implements IAsyncDisposable
@implements IDisposable

<h3>Projects</h3>

<div class="d-flex flex-row mt-2 mb-3">
    <Button Color="Color.Primary" class="mr-2" @onclick="@ModalShow">Create new</Button>
    @if (_projects is not null)
    {
        <Button Color="Color.Primary" class="mx-2" Clicked="async () => await LoadProjects()">
            <Icon Name="IconName.Sync" /> Reload
        </Button>
    }
</div>

<LoadingIndicator @bind-Visible="loading">
@if (_projects is not null)
{
    
        <Card Background="Background.Light">
        <CardBody>
            <Table>
                <TableHeader ThemeContrast="ThemeContrast.Light">
                    <TableRow>
                        <TableHeaderCell>Project name</TableHeaderCell>
                        <TableHeaderCell></TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    @for (int i = 0; i < _projects.Count; i++)
                    {
                        int j = i;
                        ProjectDTO project = _projects.ElementAt(j);
                        <TableRow>
                            <TableRowHeader>@project.Name</TableRowHeader>
                            <TableRowCell>
                                <Button Color="Color.Secondary" Clicked="() => GoToDetail(project.Id)">
                                    <Icon Name="IconName.ArrowRight" /> Show detail
                                </Button>
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        </CardBody>
    </Card>
   
}
 </LoadingIndicator>
@if (showModal)
{
    <AddProject OnClose="@ModalOk"></AddProject>
}


@code {

    private IJSObjectReference? module;
    private AddProject? ModalWindow { get; set; }
    private CancellationTokenSource cts = new CancellationTokenSource();
    private bool showModal;
    void ModalShow() => showModal = true;
    private List<ProjectDTO>? _projects = null;
    private bool loading;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    
    private async Task LoadProjects()
    {
        _projects = null;
        loading = true;
        var response = await _projectService.GetProjectsAsync();
        if (response.IsSuccess)
        {
            _projects = response.Value!.ToList();
            toastService.ShowSuccess("Projects loaded");
        }
        else
        {
            _logger.LogError(response.ErrorMessage);
            toastService.ShowError(response.ErrorMessage);
            _projects = Array.Empty<ProjectDTO>().ToList();
        }
        loading = false;
    }
    private async Task ModalOk(ProjectDTO? project)
    {
        showModal = false;
        if (project is not null)
        {
            loading = true;
            var response = await _projectService.CreateProject(project);
            await Task.Delay(2000);
            if (response.IsSuccess)
            {
                var p = response.Value;
                toastService.ShowSuccess("Project added");
                await LoadProjects();
            }
            else
            {
                toastService.ShowError("Could not create project");
            }
            loading = false;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>(
                "import", "/js/powerBiUtils.js");

            if (module is null)
            {
                _logger.LogError("Could not load JS file");
            }
            _logger.LogInformation("Js loaded");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }
    private void GoToDetail(int projectId)
    {
        navigation.NavigateTo($"/projects/{projectId}");
    }
    
    public async ValueTask DisposeAsync()
    {
        cts.Cancel();
        cts.Dispose();
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }

}
