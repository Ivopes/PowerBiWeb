@page "/projects"
@using PowerBiWeb.Client.Utilities.Interfaces;
@using PowerBiWeb.Shared.Project;
@using System.Text.Json;
@inject IJSRuntime JS
@inject ILogger<Projects> _logger;
@inject IToastService toastService;
@inject IProjectService _projectService

<h3 id="p">Projects</h3>

<button type="button" class="btn btn-primary" @onclick="@ModalShow">Create new</button>

@if(_projects is null)
{
    <div>Loading...</div>  
}
else
{
    <div>
        @foreach (var p in _projects)
        {
            string link = $"/projects/{p.Id}"; 
    
            <NavLink href=@link>
                <span>@p.Name</span>
            </NavLink>
            <br/>
    
        }
    </div>
}

@if (showModal)
{
    <AddProject OnClose="@ModalOk"></AddProject>
}

@code {
    private IJSObjectReference? module;
    private AddProject? ModalWindow { get; set; }
    private bool showModal;
    void ModalShow() => showModal = true;
    private List<ProjectDTO>? _projects = null;

    private async Task LoadProjects()
    {
        _projects = null;

        var response = await _projectService.GetProjectsAsync();
        if (response.IsSuccess)
        {
            _projects = response.Value!.ToList();
        }
        else
        {
            _logger.LogError(response.ErrorMessage);
            _projects = Array.Empty<ProjectDTO>().ToList();
        }
    }
    private async Task ModalOk(ProjectDTO? project)
    {
        showModal = false;
        if (project is not null)
        {
            /*
            var response = await httpClient.PostAsJsonAsync("api/projects", project);
            if (response.IsSuccessStatusCode)
                {
                var p = await response.Content.ReadFromJsonAsync<ProjectDTO>();
                toastService.ShowSuccess("Project added");
            await LoadProjects();
            }
            else
                {
                toastService.ShowError("Could not create project");
            }
            */
            var response = await _projectService.CreateProject(project);
            if (response.IsSuccess)
            {
                var p = response.Value;
                toastService.ShowSuccess("Project added");
                await LoadProjects();
            }
            else
            {
                toastService.ShowError("Could not create project");
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>(
                "import", "/js/powerBiUtils.js");

            if (module is null)
            {
                _logger.LogError("Could not load JS file");
            }
            _logger.LogInformation("Js loaded");
        }
    }
    protected async override Task OnInitializedAsync()
    {
        await LoadProjects();
        /*
        var response = await httpClient.GetAsync("api/report");
        if (response.IsSuccessStatusCode)
        {
            var text = await response.Content.ReadFromJsonAsync<EmbedParams>();

            await module.InvokeVoidAsync("showReport", PowerBIElement, text.EmbedToken.Token, text.EmbedReport[0].EmbedUrl, text.EmbedReport[0].ReportId);
        }
        */
    }
}
