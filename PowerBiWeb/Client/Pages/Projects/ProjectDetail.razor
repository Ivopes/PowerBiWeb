@page "/projects/{Id:int}"
@using PowerBiWeb.Client.Utilities.Interfaces;
@using PowerBiWeb.Shared.Project;
@using System.Security.Claims;
@inject HttpClient httpClient
@inject IToastService toastService
@inject AuthenticationStateProvider AuthState
@inject NavigationManager Navigation
@inject IProjectService _projectService


<div class="d-flex flex-row" style="margin: 15px">
    <NavLink href="/projects">
        <button type="button" class="btn btn-primary">Back</button>
    </NavLink><br />

    @if (project is not null)
    {
        @if (myRole <= ProjectRoleDTO.Creator)
        {
            <Button Color="Color.Danger" class="mx-2" Clicked="async () => await modalConfirmRef!.Show()">Delete project</Button>
        }
        //<Button Color="Color.Primary" class="mx-2" Clicked="async () => await UpdateReports()">Update reports</Button>
    }
</div>

@if (project is not null)
{
    <h3>@project.Name</h3>
}

<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged" Style="margin-top: 10px">
    <Items>
        <Tab Name="reports">Reports</Tab>
        <Tab Name="dashboards">Dashboards</Tab>
        <Tab Name="users">Users</Tab>
        <Tab Name="settings">Settings</Tab>
    </Items>
    <Content>
        <TabPanel Name="reports">
            <div style="margin: 5px">
                @if (project is null)
                {
                    <div>Loading...</div>
                }
                else
                {
                    <Button Color="Color.Primary" Clicked="async () => await UpdateReports()">Update reports</Button>

                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Report name</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @for (int i = 0; i < project.Reports.Count; i++)
                            {
                                var report = project.Reports.ElementAt(i);
                                string reportId = project.Reports.ElementAt(i).ReportId.ToString();
                                <TableRow>
                                    <TableRowCell>@report.ReportName</TableRowCell>
                                    <TableRowCell>
                                        <Button Color="Color.Secondary" Clicked="() => ShowReport(reportId)">Show</Button>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                }
            </div>

        </TabPanel>
        <TabPanel Name="dashboards">
            Content for dashboards.
        </TabPanel>
        <TabPanel Name="users">   
            <div style="margin: 5px">
                @if (project is null)
                {
                    <div>Loading...</div>
                }
                else
                {
                    @if (myRole <= ProjectRoleDTO.Editor)
                    {
                        <Button Color="Color.Primary" Clicked="@ShowAddModal">Add user to project</Button>
                    }
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Username</TableHeaderCell>
                                <TableHeaderCell>Email</TableHeaderCell>
                                <TableHeaderCell>Role</TableHeaderCell>
                                @if (myRole <= ProjectRoleDTO.Editor)
                                {
                                    <TableHeaderCell></TableHeaderCell>
                                    <TableHeaderCell></TableHeaderCell>
                                }
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @for (int i = 0; i < project.Users.Count; i++)
                            {
                                var user = project.Users.ElementAt(i);
                                int j = i;
                                <TableRow>
                                    <TableRowCell>@user.Username</TableRowCell>
                                    <TableRowCell>@user.Email</TableRowCell>
                                    <TableRowCell>@user.Role</TableRowCell>
                                    @if (myRole <= ProjectRoleDTO.Editor)
                                    {
                                        <TableRowCell>
                                            <Button Color="Color.Secondary" Clicked="() => ShowEditModal(j)">Edit</Button>
                                        </TableRowCell>
                                        <TableRowCell>
                                            <Button Color="Color.Danger" Clicked="() => ShowRemoveModal(j)">Remove</Button>
                                        </TableRowCell>
                                    }
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                }
            </div>
        </TabPanel>
        <TabPanel Name="settings">
            Content for settings.
        </TabPanel>
    </Content>
</Tabs>


@*
    Modal add user window
*@
<Modal @ref="modalAddRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add user to project</ModalTitle>
            <CloseButton />
    </ModalHeader>
    <ModalBody>
            <Validations ValidateOnLoad="false">

                  <Validation Validator="ValidationRule.IsEmail" >
                    <Field Horizontal>
                        <FieldLabel>Email</FieldLabel>
                        <FieldBody>
                            <TextEdit Role="TextRole.Email" @bind-Text="@addEmail">
                                <Feedback>
                                    <ValidationError>Email is required</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
            <Field>
                <FieldLabel>Role</FieldLabel>
                <Select TValue="int" @bind-SelectedValue="addRole">
                    <SelectItem Value="2">Viewer</SelectItem>
                    <SelectItem Value="1">Editor</SelectItem>
                    <SelectItem Value="0">Creator</SelectItem>
                </Select>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideAddModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@AddUserToProject">Add user</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalEditRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit user</ModalTitle>
            <CloseButton />
    </ModalHeader>
    <ModalBody>
            <Field>
                <FieldLabel>Email</FieldLabel>
                <TextEdit @bind-Text="editEmail" ReadOnly="true"></TextEdit>
            </Field>
            <Field>
                <FieldLabel>Role</FieldLabel>
                <Select TValue="int" @bind-SelectedValue="editRole">
                    <SelectItem Value="2">Viewer</SelectItem>
                    <SelectItem Value="1">Editor</SelectItem>
                    <SelectItem Value="0">Creator</SelectItem>
                </Select>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideEditModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@EditUser">Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalRemoveRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Delete user</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideRemoveModal">Close</Button>
            <Button Color="Color.Danger" Clicked="@RemoveUser">Remove</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalConfirmRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Confirm delete</ModalTitle>
    </ModalHeader>
    <ModalBody>This is destructive operation.</ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="async () => await modalConfirmRef!.Hide()">Cancel</Button>
            <Button Color="Color.Danger" Clicked="@DeleteProject">Confirm</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public int Id { get; set; }

    private ProjectDTO? project;
    private ProjectRoleDTO myRole;
    // reference to the modal component
    private Modal? modalAddRef;
    private Modal? modalEditRef;
    private Modal? modalRemoveRef;
    private Modal? modalConfirmRef;
    private string addEmail = string.Empty;
    private int addRole = 2;
    private int editRole;
    private string editEmail;
    private int deleteIndex;

    string selectedTab = "reports";

    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;

        return Task.CompletedTask;
    }

    private Task ShowAddModal()
    {
        ClearAddModalForm();
        return modalAddRef!.Show();
    }
    private Task HideAddModal()
    {
        ClearAddModalForm();
        return modalAddRef!.Hide();
    }
    private Task ShowEditModal(int index)
    {
        SetEditModalForm(index);
        return modalEditRef!.Show();
    }
    private Task ShowRemoveModal(int index)
    {
        deleteIndex = index;
        return modalRemoveRef!.Show();
    }
    private Task HideEditModal()
    {
        return modalEditRef!.Hide();
    }
    private Task HideRemoveModal()
    {
        return modalRemoveRef!.Hide();
    }
    private void ClearAddModalForm()
    {
        addEmail = string.Empty;
        addRole = 2;
    }
    private void SetEditModalForm(int index)
    {
        editRole = (int) project!.Users.ElementAt(index).Role;
        editEmail = project!.Users.ElementAt(index).Email;
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        var response = await _projectService.GetProjectDetailAsync(Id);

        if (response.Success)
        {
            project = response.Value;

            var state = await AuthState.GetAuthenticationStateAsync();

            var username = state.User.Identity!.Name;

            myRole = project!.Users.Single(u => u.Username == username).Role;
        }
        else
        {
            toastService.ShowError(response.ErrorMessage);
        }
    }
    private async Task AddUserToProject()
    {
        var dto = new UserToProjectDTO
        {
            ProjectId = Id,
            Role = (ProjectRoleDTO)addRole,
            UserEmail = addEmail,
        };

        var response = await httpClient.PostAsJsonAsync($"api/projects/user", dto);

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("User added");
            ClearAddModalForm();
        }
        else
        {
            var message = await response.Content.ReadAsStringAsync();

            toastService.ShowError(message);
        }
    }
    private async Task EditUser()
    {
        var dto = new UserToProjectDTO
            {
                ProjectId = Id,
                UserEmail = editEmail,
                Role = (ProjectRoleDTO)editRole,
            };

        var response = await httpClient.PutAsJsonAsync($"api/projects/user", dto);

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("User role changed");
            await HideEditModal();
            await LoadData();
        }
        else
        {
            var message = await response.Content.ReadAsStringAsync();

            toastService.ShowError(message);
        }
    }
    private async Task RemoveUser()
    {
        int userId = project!.Users.ElementAt(deleteIndex).Id;

        var response = await httpClient.DeleteAsync($"api/projects/{Id}/{userId}");

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("User was removed");
            await HideRemoveModal();
            await LoadData();
        }
        else
        {
            var message = await response.Content.ReadAsStringAsync();

            toastService.ShowError(message);
        }
    }
    private async Task DeleteProject()
    {
        var response = await httpClient.DeleteAsync($"api/projects/{Id}");

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/projects");
            toastService.ShowSuccess("Project was deleted");
        }
        else
        {
            var message = await response.Content.ReadAsStringAsync();

            toastService.ShowError(message);
        }
    }
    private async Task UpdateReports()
    {
        var response = await httpClient.GetAsync($"api/reports/{Id}/update");

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("Reports updated");
            await LoadData();
        }
        else
        {
            var message = await response.Content.ReadAsStringAsync();

            toastService.ShowError(message);
        }
    }
    private void ShowReport(string reportId)
    {
        Navigation.NavigateTo($"/projects/{Id}/reports/{reportId}");
    }
}
