@page "/projects/{Id:int}"
@using PowerBiWeb.Shared.Project;
@using System.Security.Claims;
@inject HttpClient httpClient
@inject IToastService toastService
@inject AuthenticationStateProvider AuthState

<h3>ProjectDetail</h3>

<p>
    <NavLink href="/projects">
        <button type="button" class="btn btn-primary">Back</button>
    </NavLink><br />
</p>

@if (project is not null)
{
    <h3>@project.Name</h3>
    <h3>@project.MetricUrl</h3>

    <Table>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Username</TableHeaderCell>
                <TableHeaderCell>Email</TableHeaderCell>
                <TableHeaderCell>Role</TableHeaderCell>
                @if(myRole <= ProjectRoleDTO.Creator)
                {
                    <TableHeaderCell></TableHeaderCell>
                }
            </TableRow>
        </TableHeader>
        <TableBody>
            @for (int i = 0; i < project.Users.Count; i++)
            {
                var user = project.Users.ElementAt(i);
                int j = i;
                <TableRow>
                    <TableRowCell>@user.Username</TableRowCell>
                    <TableRowCell>@user.Email</TableRowCell>
                    <TableRowCell>@user.Role</TableRowCell>
                    @if(myRole <= ProjectRoleDTO.Creator)
                    {
                    <TableRowCell>
                        <Button Color="Color.Secondary" Clicked="() => ShowEditModal(j)">Edit</Button>
                    </TableRowCell>
                    }
                </TableRow>
            }
        </TableBody>
    </Table>
}

<Button Color="Color.Primary" Clicked="@ShowAddModal">Add user to project</Button>
@*
    Modal add user window
*@
<Modal @ref="modalAddRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add user to project</ModalTitle>
            <CloseButton />
    </ModalHeader>
    <ModalBody>
            <Validations ValidateOnLoad="false">

                  <Validation Validator="ValidationRule.IsEmail" >
                    <Field Horizontal>
                        <FieldLabel>Email</FieldLabel>
                        <FieldBody>
                            <TextEdit Role="TextRole.Email" @bind-Text="@addEmail">
                                <Feedback>
                                    <ValidationError>Email is required</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
            <Field>
                <FieldLabel>Role</FieldLabel>
                <Select TValue="int" @bind-SelectedValue="addRole">
                    <SelectItem Value="2">Viewer</SelectItem>
                    <SelectItem Value="1">Editor</SelectItem>
                    <SelectItem Value="0">Creator</SelectItem>
                </Select>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideAddModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@AddUserToProject">Add user</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalEditRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit user</ModalTitle>
            <CloseButton />
    </ModalHeader>
    <ModalBody>
            <Field>
                <FieldLabel>Email</FieldLabel>
                <TextEdit @bind-Text="editEmail" ReadOnly="true"></TextEdit>
            </Field>
            <Field>
                <FieldLabel>Role</FieldLabel>
                <Select TValue="int" @bind-SelectedValue="editRole">
                    <SelectItem Value="2">Viewer</SelectItem>
                    <SelectItem Value="1">Editor</SelectItem>
                    <SelectItem Value="0">Creator</SelectItem>
                </Select>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideEditModal">Close</Button>
            <Button Color="Color.Primary" >Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public int Id { get; set; }

    private ProjectDTO? project;
    private ProjectRoleDTO myRole;
    // reference to the modal component
    private Modal? modalAddRef;
    private Modal? modalEditRef;
    private string addEmail = string.Empty;
    private int addRole = 2;
    private int editRole;
    private string editEmail;

    private Task ShowAddModal()
    {
        ClearAddModalForm();
        return modalAddRef!.Show();
    }
    private Task HideAddModal()
    {
        ClearAddModalForm();
        return modalAddRef!.Hide();
    }
    private Task ShowEditModal(int index)
    {
        SetEditModalForm(index);
        return modalEditRef!.Show();
    }
    private Task HideEditModal()
    {
        return modalEditRef!.Hide();
    }
    private void ClearAddModalForm()
    {
        addEmail = string.Empty;
        addRole = 2;
    }
    private void SetEditModalForm(int index)
    {
        editRole = (int) project!.Users.ElementAt(index).Role;
        editEmail = project!.Users.ElementAt(index).Email;
    }
    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetAsync($"api/project/{Id}");

        if (response.IsSuccessStatusCode)
        {
            project = await response.Content.ReadFromJsonAsync<ProjectDTO>();

            var state = await AuthState.GetAuthenticationStateAsync();

            var username = state.User.Identity!.Name;

            myRole = project!.Users.Single(u => u.Username == username).Role;
        }
    }
    private async Task AddUserToProject()
    {
        var dto = new AddUserToObjectDTO
        {
            ProjectId = Id,
            Role = (ProjectRoleDTO) addRole,
            UserEmail = addEmail
        };

        var response = await httpClient.PostAsJsonAsync($"api/project/adduser", dto);

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("User added");
            ClearAddModalForm();
        }
        else
        {
            var message = await response.Content.ReadAsStringAsync();

            toastService.ShowError(message);
        }
    }
}
