@page "/projects/{projectId:int}/reports/{reportId:guid}"
@using PowerBiWeb.Client.Utilities.Interfaces;
@using PowerBiWeb.Shared.Project
@inject IReportService _reportService 
@inject IToastService toastService
@inject IJSRuntime JS
@inject ILogger<ReportDetail> _logger
@inject NavigationManager navigation
@implements IDisposable

<div class="d-flex flex-row mt-2 mb-3">
<NavLink href=@($"/projects/{projectId}")>
    <button type="button" class="btn btn-primary mb-3"><Icon Name="IconName.ArrowLeft" /> Back</button>
</NavLink>


@if (report is not null)
{
        
<Button Color="Color.Primary" Clicked="ExportReport">Export to PDF</Button>
}

</div>


 @if (report is not null)
{
    <Card Background="Background.Light">
        <CardBody>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2">Report name</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <TextEdit ReadOnly @bind-Text="report.Name" />
                </FieldBody>
            </Field>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2">Report power BI name</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <TextEdit ReadOnly @bind-Text="report.PowerBiName" />
                </FieldBody>
            </Field>
        </CardBody>
    </Card>
}

<LoadingIndicator @bind-Visible="loading">
</LoadingIndicator>

<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
    <Items>
        <Tab Name="report">Report</Tab>
        <Tab Name="settings">Settings</Tab>
    </Items>
    <Content>
        <TabPanel Name="report">
            <div @ref="@PowerBIElement" style="width:100%;height:67vh;" class="mt-3" />
        </TabPanel>
        <TabPanel Name="settings">
            Content for profile.
        </TabPanel>
    </Content>
</Tabs>


@code {
    [Parameter]
    public Guid reportId { get; set; }
    [Parameter]
    public int projectId { get; set; }

    EmbedContentDTO? report;
    private ElementReference PowerBIElement;
    private IJSObjectReference? module;
    private CancellationTokenSource cts = new CancellationTokenSource();
    private bool loading;
    string selectedTab = "report";

    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;

        return Task.CompletedTask;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>(
                "import", "/js/powerBiUtils.js");

            if (module is null)
            {
                _logger.LogError("Could not load JS file");
            }
            _logger.LogInformation("Js loaded");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var response = await _reportService.GetReportAsync(projectId, reportId, cts.Token);

        if (response.IsSuccess)
        {
            report = response.Value;
            await EmbedView();
        }
        else
        {
            navigation.NavigateTo($"/projects/{projectId}");
            toastService.ShowError(response.ErrorMessage);
        }
        loading = false;
    }
    private async Task EmbedView()
    {
        if (module is null) return;
        await module.InvokeVoidAsync("showReport", PowerBIElement, report!.EmbedToken, report.EmbedUrl, report.Id);
    }
    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
    private async Task ExportReport()
    {
        loading = true;
        var response = await _reportService.ExportReportAsync(projectId, reportId, cts.Token);

        if (response.IsSuccess)
        {
            Stream stream = response.Value!;
            stream.Seek(0, SeekOrigin.Begin);
            using var streamRef = new DotNetStreamReference(stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", cts.Token, "mujSoubor", streamRef);
        }
        else
        {
            toastService.ShowError(response.ErrorMessage);
        }
        loading = false;
    }
}
