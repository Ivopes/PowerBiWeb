@page "/datasets"
@using PowerBiWeb.Client.Utilities.Http;
@using PowerBiWeb.Client.Utilities.Interfaces;
@using PowerBiWeb.Shared.Datasets;
@inject IDatasetService _datasetService
@inject IToastService toastService
@inject NavigationManager navigation

<h3 id="p">Datasets</h3>

<button type="button" class="btn btn-primary" @onclick="async () => await ShowAddModal(true)">Add new</button>

<button type="button" class="btn btn-primary" @onclick="async () => await ShowAddModal(false)">Add existing</button>

@if (loading)
{
        <div>Loading...</div>  
}
else if (_datasets is not null)
{
        <div>
        <Table>
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>Dataset name</TableHeaderCell>
                    <TableHeaderCell></TableHeaderCell>
                    <TableHeaderCell></TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @for (int i = 0; i < _datasets.Count; i++)
                {
                    int j = i;
                    DatasetDTO dataset = _datasets.ElementAt(j);
                    <TableRow>
                        <TableRowHeader>@dataset.Name</TableRowHeader>
                        <TableRowCell>
                            <Button Color="Color.Secondary" Clicked="() => GoToDetail(dataset.Id)">
                                <Icon Name="IconName.ArrowRight" /> Show detail
                            </Button>
                        </TableRowCell>
                        <TableRowCell>
                            <Button Color="Color.Danger" Clicked="() => DeleteDataset(dataset.Id)">
                                <Icon Name="IconName.Delete" /> Delete
                            </Button>
                        </TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
        </div>
}

<Modal @ref="modalAddRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add dataset</ModalTitle>
            <CloseButton />
    </ModalHeader>
    <ModalBody>
            <div class="form-group">
                <label for="metricsId">Metric Id</label>
                <InputText id="metricsId" class="form-control" @bind-Value="addDataset.MetricFilesId" />
            </div>
            <div class="form-group">
                <label for="metricsId">Metric custom name</label>
                <InputText id="metricsId" class="form-control" @bind-Value="addDataset.Name" />
            </div>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideAddModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@AddDataset">Add</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private List<DatasetDTO>? _datasets = null;
    private Modal? modalAddRef;
    private DatasetDTO addDataset = new();
    private bool addNew = false; //Add new or add existing?
    private bool loading = true;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        loading = true;
        HttpResponse<List<DatasetDTO>> response = await _datasetService.GetAllAsync();

        if (response.IsSuccess)
        {
            _datasets = response.Value;

            toastService.ShowSuccess("Datasets loaded");
        }
        else
        {
            toastService.ShowError(response.ErrorMessage);
        }
        loading = false;
    }
    private async Task AddDataset()
    {
        if (string.IsNullOrEmpty(addDataset.Name) || string.IsNullOrWhiteSpace(addDataset.MetricFilesId))
        {
            toastService.ShowError("Please fill the form");
            return;
        }

        HttpResponse<DatasetDTO> response = await _datasetService.AddDatasetAsync(addDataset, addNew);

        if (response.IsSuccess)
        {
            toastService.ShowSuccess("Dataset added");

            await LoadData();
        }
        else
        {
            toastService.ShowError(response.ErrorMessage);
        }
    }
    private async Task HideAddModal()
    {
        addDataset = new();
        await modalAddRef.Hide();
    }
    private async Task ShowAddModal(bool addNew)
    {
        this.addNew = addNew;
        await modalAddRef.Show();
    }
    private void GoToDetail(int datasetId)
    {
        navigation.NavigateTo($"/datasets/{datasetId}");
    }
    private async Task DeleteDataset(int datasetId)
    {
        HttpResponse response = await _datasetService.DeleteDatasetAsync(datasetId);

        if (response.IsSuccess)
        {
            toastService.ShowSuccess("Dataset deleted");
            await HideAddModal();
            await LoadData();
        }
        else
        {
            toastService.ShowError(response.ErrorMessage);
        }
    }
}
