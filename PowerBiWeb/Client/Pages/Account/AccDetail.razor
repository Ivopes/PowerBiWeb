@page "/account"
@using PowerBiWeb.Client.Utilities.Auth;
@using System.Security.Claims;
@using PowerBiWeb.Client.Utilities.Http;
@using PowerBiWeb.Client.Utilities.Interfaces;
@using PowerBiWeb.Shared.User;
@inject AuthenticationStateProvider authProvider
@inject IToastService toastService
@inject IUserService userService

<LoadingIndicator @bind-Visible="loading" Style="height:50vh">
    <div class="d-flex justify-content-center align-items-center flex-column">
        <Card Style="width: 65vh" Background="Background.Light">
        @if (detail is not null)
        {
          <CardBody>
                <CardTitle>
                    <h3>
                        Account detail
                    </h3>
                </CardTitle>
                <Field>
                    <FieldLabel>First name</FieldLabel>
                    <TextEdit ReadOnly @bind-Text="detail.Firstname" />
                </Field>
                <Field >
                    <FieldLabel>Last name</FieldLabel>
                    <TextEdit ReadOnly @bind-Text="detail.Lastname" />
 
                </Field>
                <Field>
                    <FieldLabel>Username</FieldLabel>
                    <TextEdit ReadOnly @bind-Text="detail.Username" />
                </Field>
                <Field >
                    <FieldLabel>Email</FieldLabel>
                    <TextEdit ReadOnly @bind-Text="detail.Email" />
                </Field>
                
                <Button Color="Color.Secondary" Clicked="ShowUsernameModal">Change username</Button>
                <Button Color="Color.Secondary" Clicked="ShowPasswordModal">Change password</Button>

            </CardBody>
        }
        </Card>
    </div>
</LoadingIndicator>

<Modal @ref="modalUsernameRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Change username</ModalTitle>
            <CloseButton />
           
    </ModalHeader>
    <ModalBody>
            <div class="form-group">
                <label for="newDatasetId">New username</label>
                <InputText id="newDatasetId" class="form-control" @bind-Value="newUsername" />
            </div>
            <h3> You will need to relog after!!!</h3>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="HideUsernameModal">Close</Button>
            <Button Color="Color.Primary" Clicked="ChangeUsername">Change</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="modalPasswordRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Change password</ModalTitle>
            <CloseButton />
           
    </ModalHeader>
    <ModalBody>
            <div class="form-group">
                <label>Old password</label>
                <InputText class="form-control" type="password" @bind-Value="oldPassword" />

                <label>New password</label>
                <InputText class="form-control" type="password" @bind-Value="newPassword" />

                <label>New password again</label>
                <InputText class="form-control" type="password" @bind-Value="newPasswordCheck" />
            </div>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="HidePasswordModal">Close</Button>
            <Button Color="Color.Primary" Clicked="ChangePassword">Change</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    UserDetail? detail;
    private bool loading;

    private Modal? modalUsernameRef;
    private Modal? modalPasswordRef;

    private string newUsername = string.Empty;
    private string oldPassword = string.Empty;
    private string newPassword = string.Empty;
    private string newPasswordCheck = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var state = await authProvider.GetAuthenticationStateAsync();

        int id = int.Parse(state.User.Claims.Single(c => c.Type == ClaimTypes.NameIdentifier).Value);

        var response = await userService.GetById(id);

        if (response.IsSuccess)
        {
            detail = response.Value;
        }
        else
        {
            toastService.ShowError(response.ErrorMessage);
        }
        loading = false;
    }
    private async Task HideUsernameModal()
    {
        newUsername = string.Empty;
        await modalUsernameRef!.Hide();
    }
    private async Task ShowUsernameModal()
    {
        newUsername = string.Empty;
        await modalUsernameRef!.Show();
    }
    private async Task HidePasswordModal()
    {
        oldPassword = newPassword = newPasswordCheck = string.Empty;
        await modalPasswordRef!.Hide();
    }
    private async Task ShowPasswordModal()
    {
        oldPassword = newPassword = newPasswordCheck = string.Empty;
        await modalPasswordRef!.Show();
    }
    private async Task ChangeUsername()
    {
        if (string.IsNullOrEmpty(newUsername))
        {
            toastService.ShowError("Fill the form");
            return;
        }

        if (newUsername == detail!.Username)
        {
            toastService.ShowError("New username is the same as old one");
            return;
        }

        var response = await userService.ChangeUsername(newUsername);
        if (response.IsSuccess)
        {
            detail = response.Value;
            await HideUsernameModal();
            if (authProvider is TokenAuthStateProvider aProvider)
            {
                await aProvider.RemoveToken();
            }
            await authProvider.GetAuthenticationStateAsync();
        }
        else
        {
            toastService.ShowError(response.ErrorMessage);
            await HideUsernameModal();
        }
    }
    private async Task ChangePassword()
    {
        if (string.IsNullOrEmpty(oldPassword) || string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(newPasswordCheck))
        {
            toastService.ShowError("Fill the form");
            return;
        }

        if (newPassword != newPasswordCheck)
        {
            toastService.ShowError("Password does not match");
            return;
        }

        HttpResponse response = await userService.ChangePassword(oldPassword, newPassword);
        if (response.IsSuccess)
        {
            await HidePasswordModal();
            toastService.ShowSuccess("Password changed");
        }
        else
        {
            toastService.ShowError(response.ErrorMessage);
            await HideUsernameModal();
        }
    }
}
