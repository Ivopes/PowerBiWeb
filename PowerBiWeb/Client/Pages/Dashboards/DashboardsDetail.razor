@page "/projects/{projectId:int}/dashboards/{dashboardId:guid}"
@using PowerBiWeb.Client.Utilities.Interfaces;
@using PowerBiWeb.Shared.Project
@using System.Security.Claims
@inject IDashboardService _dashboardService 
@inject IToastService toastService
@inject IJSRuntime JS
@inject ILogger<DashboardsDetail> _logger
@inject NavigationManager navigation
@inject AuthenticationStateProvider AuthState
@implements IDisposable
@implements IAsyncDisposable

<NavLink href=@($"/projects/{projectId}")>
    <button type="button" class="btn btn-primary mb-3"><Icon Name="IconName.ArrowLeft" /> Back</button>
</NavLink>

<LoadingIndicator @bind-Visible="loading">
</LoadingIndicator>

@{
    string divStyle = "";
    if (loading)
    {
        divStyle = "display:none";
    }
}

<div style="@divStyle">
    <Card Background="Background.Light">
        <CardBody>
             @if (dashboard is not null)
              {
                  <CardTitle>
                      <h3 class="mt-1 mb-3">@dashboard.Name</h3>
                  </CardTitle>
              }
            
             
             <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
                 <Items>
                     <Tab Name="dashboard">Dashboard</Tab>
                     @if (myRole <= ProjectRoleDTO.Editor)
                     {
                         <Tab Name="settings">Settings</Tab>
                     }
                 </Items>
                 <Content>
                     <TabPanel Name="dashboard">
                         <div @ref="@PowerBIElement" style="width:100%;height:67vh;" class="mt-3"/>
                     </TabPanel>
                     <TabPanel Name="settings">
                         @if (myRole <= ProjectRoleDTO.Editor)
                         {
                             <TabPanel Name="settings">

                                 <div style="margin-top:25px">
                                     <EditForm Model="dashboard" OnValidSubmit="ChangeDashboardSettings">
                                         @if (dashboard is not null)
                                         {
                                             <Field Horizontal>
                                                 <FieldLabel ColumnSize="ColumnSize.Is2">Dashboard name</FieldLabel>
                                                 <FieldBody ColumnSize="ColumnSize.Is10">
                                                     <TextEdit @bind-Text="dashboard.Name"/>
                                                 </FieldBody>
                                             </Field>
                                             <Field Horizontal>
                                                 <FieldLabel ColumnSize="ColumnSize.Is2">Dashboard power BI name</FieldLabel>
                                                 <FieldBody ColumnSize="ColumnSize.Is10">
                                                     <Tooltip Text="This can be changed in Power BI">
                                                        <TextEdit ReadOnly @bind-Text="dashboard.PowerBiName"/>
                                                     </Tooltip>
                                                 </FieldBody>
                                             </Field>
                                         }

                                         <Button Color="Color.Primary" Type="ButtonType.Submit">
                                             <Icon Name="IconName.Save"/> Save
                                         </Button>
                                     </EditForm>
                                 </div>

                             </TabPanel>
                         }

                     </TabPanel>
                 </Content>
             </Tabs>
        </CardBody>
    </Card>
</div>

@code {
    [Parameter]
    public Guid dashboardId { get; set; }
    [Parameter]
    public int projectId { get; set; }

    DashboardDTO? dashboard;
    private ElementReference PowerBIElement;
    private IJSObjectReference? module;
    private CancellationTokenSource cts = new CancellationTokenSource();
    private bool loading;
    string selectedTab = "dashboard";
    private ProjectRoleDTO myRole = ProjectRoleDTO.Viewer;
    
    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;

        return Task.CompletedTask;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>(
                "import", "/js/powerBiUtils.js");

            if (module is null)
            {
                _logger.LogError("Could not load JS file");
            }
            _logger.LogInformation("Js loaded");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        var respose = await _dashboardService.GetDashboardAsync(projectId, dashboardId, cts.Token);

        if (respose.IsSuccess)
        {
            dashboard = respose.Value;
            if (dashboard!.Projects.Count > 0)
            {
                var state = await AuthState.GetAuthenticationStateAsync();

                var id = int.Parse(state.User.FindFirst(ClaimTypes.NameIdentifier)!.Value);

                myRole = dashboard.Projects[0].Users.Single(u => u.Id == id).Role;
            }
            await EmbedView();
        }
        else
        {
            navigation.NavigateTo($"/projects/{projectId}");
            toastService.ShowError(respose.ErrorMessage);
        }

        loading = false;
    }

    private async Task EmbedView()
    {
        if (module is null) return;
        await module.InvokeVoidAsync("showDashboard", PowerBIElement, dashboard!.EmbedToken, dashboard.EmbedUrl, dashboard.Id);
    }
    private async Task ChangeDashboardSettings()
    {
        loading = true;
        var response = await _dashboardService.UpdateDashboardSettingsAsync(dashboard!);

        if (response.IsSuccess)
        {
            toastService.ShowSuccess("Changes saved");
            //await LoadData();
        }
        else
        {
            toastService.ShowError(response.ErrorMessage);
        }
        loading = false;
    }
    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
    public async ValueTask DisposeAsync()
    {
        cts.Cancel();
        cts.Dispose();
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
}
