@page "/projects/{projectId:int}/dashboards/{dashboardId:guid}"
@using PowerBiWeb.Client.Utilities.Interfaces;
@using PowerBiWeb.Shared.Project
@inject IDashboardService _dashboardService 
@inject IToastService toastService
@inject IJSRuntime JS
@inject ILogger<DashboardsDetail> _logger
@inject NavigationManager navigation
@implements IDisposable

<NavLink href=@($"/projects/{projectId}")>
    <button type="button" class="btn btn-primary mb-3"><Icon Name="IconName.ArrowLeft" /> Back</button>
</NavLink>

 @if (dashboard is not null)
{
    <h3>@dashboard.Name</h3>
    <h5>@dashboard.PowerBiName</h5>
}

<LoadingIndicator @bind-Visible="loading">
</LoadingIndicator>

<div @ref="@PowerBIElement" style="width:100%;height:75vh;" class="mt-3"/>

@code {
    [Parameter]
    public Guid dashboardId { get; set; }
    [Parameter]
    public int projectId { get; set; }

    EmbedContentDTO? dashboard;
    private ElementReference PowerBIElement;
    private IJSObjectReference? module;
    private CancellationTokenSource cts = new CancellationTokenSource();
    private bool loading;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>(
                "import", "/js/powerBiUtils.js");

            if (module is null)
            {
                _logger.LogError("Could not load JS file");
            }
            _logger.LogInformation("Js loaded");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var respose = await _dashboardService.GetDashboardAsync(projectId, dashboardId, cts.Token);

        if (respose.IsSuccess)
        {
            dashboard = respose.Value;
            await EmbedView();
        }
        else
        {
            navigation.NavigateTo($"/projects/{projectId}");
            toastService.ShowError(respose.ErrorMessage);
        }
        loading = false;
    }
    private async Task EmbedView()
    {
        if (module is null) return;
        await module.InvokeVoidAsync("showDashboard", PowerBIElement, dashboard!.EmbedToken, dashboard.EmbedUrl, dashboard.Id);
    }
    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
