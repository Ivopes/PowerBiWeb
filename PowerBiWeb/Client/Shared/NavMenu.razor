@using Blazored.LocalStorage;
@using PowerBiWeb.Client.Utilities.Auth;
@inject ILocalStorageService _localStorage
@inject AuthenticationStateProvider authProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">PowerBiWeb</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="account">
                <span class="oi oi-person" aria-hidden="true"></span> Account
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="projects">
                <span class="oi oi-grid-three-up" aria-hidden="true"></span> Projects
            </NavLink>
        </div>
        <AuthorizeView Roles="Admin">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="datasets">
                    <span class="oi oi-book" aria-hidden="true"></span> Datasets
                </NavLink>
            </div>
        </AuthorizeView>
        <div class="nav-item px-3">
            <a class="nav-link" style="cursor: pointer" @onclick="Logout">
                <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
            </a>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private async Task Logout()
    {
        if (authProvider is TokenAuthStateProvider aProvider)
        {
            await aProvider.RemoveToken();
        }
        await authProvider.GetAuthenticationStateAsync();
    }
}
